const { Sequelize } = require('sequelize');
const RentalRepository = require('../rentalRepository');
const RentalModel = require('../../../model/rentalModel');
const CarModel = require('../../../../car/model/carModel');
const CustomerModel = require('../../../../customer/model/customerModel');
const RentalEntity = require('../../../entity/rental');
const CarEntity = require('../../../../customer/entity/customer');
const CustomerEntity = require('../../../../car/entity/car');
const RentalNotFoundError = require('../../error/RentalNotFoundError');
const RentalIdNotDefinedError = require('../../error/RentalIdNotDefinedError');

const sequelizeInstance = new Sequelize('sqlite::memory');

/**
 * @type RentalRepository
 */
let repository;

const sampleRental = new RentalEntity({
    carId: 1,
    customerId: 1,
    carPricePerDay: 203,
    startDate: '2010-10-10',
    endDate: '2010-11-11',
    totalPrice: 2304,
    paymentType: 'Debit',
    isPaid: true,
    customer: {},
    car: {},
});

const sampleCar = new CarEntity({
    id: 0,
    imageSrc:
        'https://www.kayak.com/h/run/api/image?caller=Cars&height=196&crop=true&url=/carimages/generic/02_economy_red.png',
    brand: 'toyota',
    model: 'Yaris',
    year: 2020,
    kms: 2030,
    color: 'Red',
    hasAirConditioning: true,
    seats: 4,
    hasAutomaticTransmission: true,
    priceInCents: 40005,
});

const sampleCustomer = new CustomerEntity({
    firstNames: 'jhon',
    lastNames: 'locke',
    documentType: 'DNI',
    documentNumber: 234959583,
    nationality: 'British',
    address: 'Western 394',
    phone: 2394924,
    email: 'elJhony@gmail.com',
    birthDate: '10-10-2000',
    isDeleted: false,
});

beforeAll(() => {
    const rental = RentalModel.setup(sequelizeInstance);
    const car = CarModel.setup(sequelizeInstance);
    const customer = CustomerModel.setup(sequelizeInstance);
    rental.belongsTo(customer, { as: 'customer' });
    rental.belongsTo(car, { as: 'car' });

    repository = new RentalRepository(rental);
});

beforeEach(async (done) => {
    await sequelizeInstance.sync({ force: true });
    await CarModel.create(sampleCar);
    await CustomerModel.create(sampleCustomer);
    done();
});

test('Crea un rental cuando la entidad no tiene id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newRental = await repository.save(sampleRental);
    expect(newRental.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Actualiza un rental cuando la entidad tiene un id', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newRental = await repository.save(sampleRental);
    expect(newRental.id).toEqual(NEW_AUTOGENERATED_ID);

    const newTotalPrice = 20304;
    newRental.totalPrice = newTotalPrice;
    const modifiedRental = await repository.save(newRental);
    expect(modifiedRental.id).toEqual(NEW_AUTOGENERATED_ID);
    expect(modifiedRental.totalPrice).toEqual(newTotalPrice);
});

test('getById sin id devuelve un error', async () => {
    await expect(repository.getById()).rejects.toThrow(RentalIdNotDefinedError);
});

test('getById con un id inexisten devuelve un error', async () => {
    await expect(repository.getById(2)).rejects.toThrow(RentalNotFoundError);
});

test('getById con un id existente devuelve un rental entity', async () => {
    const newRental = await repository.save(sampleRental);
    await expect(repository.getById(1)).resolves.toEqual(
        expect.objectContaining({
            id: newRental.id,
            customerId: newRental.customerId,
            carId: newRental.carId,
            totalPrice: newRental.totalPrice,
        })
    );
});

test('Borrar un rental existente devuelve true', async () => {
    const NEW_AUTOGENERATED_ID = 1;
    const newRental = await repository.save(sampleRental);
    expect(newRental.id).toEqual(NEW_AUTOGENERATED_ID);
    await expect(repository.delete(newRental)).resolves.toEqual(true);
    await expect(repository.getById(NEW_AUTOGENERATED_ID)).rejects.toThrow(
        RentalNotFoundError
    );
});

test('Borrar un rental sin parÃ¡metros da error', async () => {
    await expect(repository.delete()).rejects.toThrow(RentalIdNotDefinedError);
});

test('Borrar un rental sin id da error', async () => {
    await expect(repository.delete({})).rejects.toThrow(
        RentalIdNotDefinedError
    );
});

test('Borrar un rental con id inexistente devuelve false', async () => {
    await expect(repository.delete({ id: 1 })).resolves.toEqual(false);
});

test('getAll devuelve un array vacio si no existe ningun rental', async () => {
    await expect(repository.getAll()).resolves.toEqual([]);
});

test('getAll devuelve un array con un unico rental', async () => {
    const newRental = await repository.save(sampleRental);
    await expect(repository.getAll()).resolves.toEqual([newRental]);
});
